# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# see org.apache.kafka.clients.consumer.ConsumerConfig for more details

# list of brokers used for bootstrapping knowledge about the rest of the cluster
# format: host1:port1,host2:port2 ...
bootstrap.servers=localhost:9092

# A unique string that identifies the consumer group this consumer belongs to.
# This property is required if the consumer uses either the group management functionality by using subscribe(topic) or the Kafka-based offset management strategy.
group.id=Jim-consumer

# A unique identifier of the consumer instance provided by the end user. Only non-empty strings are permitted.
# If set, the consumer is treated as a static member, which means that only one instance with this ID is allowed in the consumer group at any time.
# This can be used in combination with a larger session timeout to avoid group rebalances caused by transient unavailability (e.g. process restarts). If not set, the consumer will join the group as a dynamic member, which is the traditional behavior.
#group.instance.id

# If true the consumer's offset will be periodically committed in the background.
enable.auto.commit=false

# Whether internal topics matching a subscribed pattern should be excluded from the subscription. It is always possible to explicitly subscribe to an internal topic.
exclude.internal.topics=true

# What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted):
# earliest: automatically reset the offset to the earliest offset
# latest: automatically reset the offset to the latest offset
# none: throw exception to the consumer if no previous offset is found for the consumer's group
# anything else: throw exception to the consumer.
auto.offset.reset=earliest

# The maximum delay between invocations of poll() when using consumer group management.This places an upper bound on the amount of time that the consumer can be idle before fetching more records.
# If poll() is not called before expiration of this timeout, then the consumer is considered failed and the group will rebalance in order to reassign the partitions to another member.
# For consumers using a non-null group.instance.id which reach this timeout, partitions will not be immediately reassigned. I
#  Instead, the consumer will stop sending heartbeats and partitions will be reassigned after expiration of session.timeout.ms. This mirrors the behavior of a static consumer which has shutdown.
#max.poll.interval.ms

# The maximum number of records returned in a single call to poll().
#max.poll.records

#
key.deserializer=org.apache.kafka.common.serialization.StringDeserializer

#
value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

# The minimum amount of data the server should return for a fetch request. If insufficient data is available the request will wait for that much data to accumulate before answering the request.
# The default setting of 1 byte means that fetch requests are answered as soon as a single byte of data is available or the fetch request times out waiting for data to arrive.
# Setting this to something greater than 1 will cause the server to wait for larger amounts of data to accumulate which can improve server throughput a bit at the cost of some additional latency.
fetch.min.bytes=1

# The maximum amount of data the server should return for a fetch request.  Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress.
# As such, this is not a absolute maximum. The maximum record batch size accepted by the broker is defined via message.max.bytes (broker config) or max.message.bytes (topic config). Note that the consumer performs multiple fetches in parallel.
fetch.max.bytes=52428800

# The expected time between heartbeats to the consumer coordinator when using Kafka's group management facilities.Heartbeats are used to ensure that the consumer's session stays active and to facilitate rebalancing when new consumers join or leave the group
# the value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.
# heartbeat.interval.ms=3000

# The timeout used to detect client failures when using Kafka's group management facility. The client sends periodic heartbeats to indicate its liveness to the broker.
# If no heartbeats are received by the broker before the expiration of this session timeout, then the broker will remove this client from the group and initiate a rebalance.
#  Note that the value must be in the allowable range as configured in the broker configuration by group.min.session.timeout.ms and group.max.session.timeout.ms.
# session.timeout.ms=10000

# The configuration controls the maximum amount of time the client will wait for the response of a request.
# If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.
#request.timeout.ms

# Close idle connections after the number of milliseconds specified by this config.
connections.max.idle.ms=540000

# Allow automatic topic creation on the broker when subscribing to or assigning a topic.
# A topic being subscribed to will be automatically created only if the broker allows for it using `auto.create.topics.enable` broker configuration.
allow.auto.create.topics=true
